#!/bin/bash

set -Eeo pipefail

stack_name=base-infra

stack_env="global"
aws_region="eu-west-2"
state_lock_table="prm-gp2gp-terraform-table"

function assume_role {
    if [ "${NHS_ACCOUNT}" == "common" ]; then
      return 0
    elif [ "${NHS_ACCOUNT}" == "dev" ] || [ "${NHS_ACCOUNT}" == "preprod" ]; then
      role_arn=$(aws ssm get-parameters --region ${aws_region} --names /registrations/${NHS_ACCOUNT}/user-input/cross-account-admin-role --query Parameters[0].Value --output text)
    else
      echo "NHS_ACCOUNT=${NHS_ACCOUNT} is not supported"
      exit 2
    fi

    session_name="registrations-dashboard-${NHS_ACCOUNT}-session"

    echo "Assuming ${NHS_ACCOUNT} role..."

    sts=( $(
        aws sts assume-role \
        --role-arn $role_arn \
        --role-session-name $session_name \
        --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
        --output text
    ) )
    export AWS_ACCESS_KEY_ID=${sts[0]}
    export AWS_SECRET_ACCESS_KEY=${sts[1]}
    export AWS_SESSION_TOKEN=${sts[2]}
}

function tf_init {
    stack_env=$1
    setup_account_variables
    rm -rf .terraform
    terraform init \
        -backend-config key=${stack_env}/${stack_name}/terraform.tfstate \
        -backend-config bucket=${state_bucket} \
        -backend-config dynamodb_table=${state_lock_table} \
        -backend-config region=${aws_region} \
        ${tf_dir}
}

function setup_account_variables {
    if [ -z "${NHS_ACCOUNT}" ]; then
      echo "NHS_ACCOUNT environment variable is not set."
      exit 3
    fi
    if [ "${NHS_ACCOUNT}" == "common" ]; then
      export state_bucket="prm-gp2gp-terraform-state"
      export tf_dir=terraform
    else
      export state_bucket="prm-gp2gp-terraform-state-${NHS_ACCOUNT}"
      export tf_dir=terraform-cross-account
    fi
    export TF_VAR_FILE="${tf_dir}/${NHS_ACCOUNT}.tfvars"
}

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 TASK"
    exit 1
fi

task="$1"

echo "--- ${task} ---"
case "${task}" in
    validate)
        assume_role
        tf_init ${stack_env}
        terraform validate ${tf_dir}
    ;;
    dojo-validate)
        dojo "./tasks validate"
    ;;
    plan)
        assume_role
        tf_init ${stack_env}
        terraform plan -var-file="$TF_VAR_FILE" -out=plan.tfplan ${tf_dir}
    ;;
    dojo-plan)
        dojo "./tasks plan"
    ;;
    apply)
        assume_role
        tf_init ${stack_env}
        terraform apply plan.tfplan
    ;;
    dojo-apply)
        dojo "./tasks apply"
    ;;
    *)
        echo "Invalid task: '${task}'"
        exit 1
    ;;
esac

set +e
